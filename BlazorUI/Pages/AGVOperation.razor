@page "/AGVOperation"
@using AGV.Services
@using global::Shared.Models
@inject IAGVSimulationService SimulationService

<div class="container mt-4 text-center">
    <h3 class="text-center">AGV Operation</h3>
</div>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6">
            <!-- Status and Coordinates cards (existing code) -->
        </div>

        <div class="card mt-3 card-no-border">
            <div class="card-body center-card-content">
                <input type="text" @bind="_statorNo" placeholder="Enter StatorNo"/>
                <button @onclick="StartSimulation" class="btn btn-primary" disabled="@(_statorNo == 0)">Activate </button>
            </div>
        </div>

        <div class="container mt-4">
            <div class="card">
                <div class="card-body agv-table">
                    <h5 class="card-title">Activity Log</h5>
                    <table class="table" style="height: 300px;">
                        <thead>
                        <tr>
                            <th>Segment No</th>
                            <th>Action</th>
                            <th>Timestamp</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var movement in _simulatedMovements)
                        {
                            <tr>
                                <td>@movement.SegmentNo</td>
                                <td>@movement.LogText</td>
                                <td>@movement.AddedAt</td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-body">
                <h5 class="card-title">Route Map</h5>
                <div id="map" style="height: 300px;"></div>
            </div>
        </div>
    </div>
</div>


@code {
    private List<AgvStatusModel> _simulatedMovements = new();
    private int _statorNo;

    protected override void OnInitialized()
    {
        SimulationService.StepCompleted += OnStepCompleted;
    }

    private void OnStepCompleted(object sender, AgvStatusModel step)
    {
        _simulatedMovements.Add(step);
        StateHasChanged();
    }

    private async Task StartSimulation()
    {
        StateHasChanged();

        // Call the simulation service to start the AGV movement simulation
        await SimulationService.SimulateSegmentMovement(_statorNo);

        // Send the simulated movements after simulation completes to database
        await SimulationService.SendToDatabase(_simulatedMovements);
    }

}