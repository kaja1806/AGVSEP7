@page "/Stator"
@using global::Shared.Models
@inject HttpClient HttpClient


<h3>Add new stator</h3>

<EditForm Model="@_formData" OnValidSubmit="HandleValidSubmit" class="form-table">
    <DataAnnotationsValidator/>
    <ValidationSummary/>

    <div class="form-group">
        <label for="Name">Name:</label>
        <InputText id="Name" @bind-Value="_formData.Name" class="form-control"/>
    </div>

    <div class="form-group">
        <label for="StatorNo">Stator Number:</label>
        <InputText id="StatorNo" @bind-Value="_formData.StatorNo" class="form-control"/>
    </div>

    <div class="form-group">
        <label for="ProductionOrder">Production Order:</label>
        <InputText id="ProductionOrder" @bind-Value="_formData.ProductionOrder" class="form-control"/>
    </div>

    <div class="form-group">
        <label for="Operator">Operator:</label>
        <InputText id="Operator" @bind-Value="_formData.Operator" class="form-control"/>
    </div>

    <div class="form-group">
        <label for="Date">Date:</label>
        <InputDate id="Date" @bind-Value="_formData.Date" class="form-control"/>
    </div>

    <div class="form-group">
        <label for="MeasurementNo">MeasurmentNo:</label>
        <InputNumber id="MeasurementNo" @bind-Value="_formData.MeasurementNo" class="form-control"></InputNumber>
    </div>

    <div class="form-group">
        <label for="StatorTemp">Stator Temp:</label>
        <InputNumber id="StatorTemp" @bind-Value="_formData.StatorTemp" class="form-control"/>
    </div>


    <button type="submit" class="btn btn-primary">Create New Stator</button>
    <div class="form-group">
        <InputText id="ApiResponse" @bind-Value="apiResponseMessage" class="form-control" readonly/>
    </div>
</EditForm>

<div class="form-group">
    <label for="finished">Stator No which has been finished:</label>
    <InputNumber id="finished" @bind-Value="statorNo" class="form-control"/>
    <button class="btn btn-primary" @onclick="SetStatorDone">Submit</button>
</div>

<table class="table">
    <thead>
    <tr>
        <th>Name</th>
        <th>Stator Number</th>
        <th>Production Order</th>
        <th>Operator</th>
        <th>Date</th>
        <th>MeasurementNo</th>
        <th>StatorNo</th>
        <th>Status</th>
    </tr>
    </thead>
    <tbody>
    @if (_stators != null)
    {
        @foreach (var data in _stators)
        {
            <tr>
                <td>@data.Name</td>
                <td>@data.StatorNo</td>
                <td>@data.ProductionOrder</td>
                <td>@data.Operator</td>
                <td>@data.Date.ToShortDateString()</td>
                <td>@data.MeasurementNo</td>
                <td>@data.StatorNo</td>
                <td>@(data.Status ? "Finished" : "In Progress")</td>
            </tr>
        }
    }
    </tbody>
</table>


@code {
    private StatorDto _formData = new StatorDto();
    private List<StatorDto> _dataList = new List<StatorDto>();
    private bool submitted;
    private int statorNo;
    private string apiResponseMessage;
    private List<StatorDto>? _stators;


    protected override async Task OnInitializedAsync()
    {
        _formData.Date = DateTime.Now;
        await GetAllStators();
    }

    private async Task GetAllStators()
    {
        _stators = await HttpClient.GetFromJsonAsync<List<StatorDto>>($"api/Stator/GetStator") ?? throw new InvalidOperationException();
    }

    private async Task SetStatorDone()
    {
        await HttpClient.PostAsJsonAsync($"api/Stator/SetStatorFinished/{statorNo}", statorNo);
        await GetAllStators();
    }

    private async Task HandleValidSubmit()
    {
        _dataList.Add(new StatorDto
        {
            Name = _formData.Name,
            StatorNo = _formData.StatorNo,
            ProductionOrder = _formData.ProductionOrder,
            Operator = _formData.Operator,
            Date = _formData.Date,
            MeasurementNo = _formData.MeasurementNo,
            StatorTemp = _formData.StatorTemp
        });

        // Make an HTTP POST request to your endpoint
        var response = await HttpClient.PostAsJsonAsync("api/Stator/SetStator", _formData);

        var jsonResponse = await response.Content.ReadAsStringAsync();

        if (response.IsSuccessStatusCode)
        {
            submitted = true;
            apiResponseMessage = jsonResponse;
            _formData = new StatorDto(); // Reset the form
            await GetAllStators();
        }
        else
        {
            apiResponseMessage = jsonResponse; // Display the error message
        }
    }

}