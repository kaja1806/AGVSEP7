<!-- QualityAnalysis.razor -->
@page "/QualityAnalysis"
@using global::Shared.Models
@inject HttpClient HttpClient

<div class="card">
    <h3>Automated Quality Analysis and Adjustments</h3>

    <h3>Measurement Data</h3>

    <button class="btn btn-primary" @onclick="RefreshData">Refresh</button>

    <table class="adjustment-table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Measured Value</th>
            <th>Tolerance</th>
            <th>Deviation</th>
            <th>Adjustment Needed</th>
            <th>Segment No</th>
            <th>Stator No</th>
        </tr>
        </thead>
        <tbody>
        @if (_calculationResults != null)
        {
            @foreach (var measurement in _calculationResults)
            {
                <tr>
                    <td>@measurement.Date</td>
                    <td>@measurement.MeasuredValue.ToString("F2")</td>
                    <td>@measurement.Tolerance.ToString("F2")</td>
                    <td>@measurement.Deviation.ToString()</td>
                    <td style="@GetAdjustmentStyle(measurement)">
                        @if (measurement.AdjustmentNeeded != null)
                        {
                            @((measurement.AdjustmentNeeded == true) ? "Yes" : "No")
                        }
                        else
                        {
                            <text>Run Calculation</text>
                        }
                    </td>
                    <td>@measurement.SegmentNo.ToString("F1")</td>
                    <td>@measurement.StatorNo</td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>
@code {
    private List<AdjustedCalculationDto>? _calculationResults;

    protected override async Task OnInitializedAsync()
    {
        await GetCalculationResult();
    }

    private async Task GetCalculationResult()
    {
        _calculationResults = await HttpClient.GetFromJsonAsync<List<AdjustedCalculationDto>>($"api/controller/GetAllCalculationResults") ?? throw new InvalidOperationException();
    }

    private async Task RefreshData()
    {
        await GetCalculationResult();
        StateHasChanged(); // Trigger UI update
    }

    private string GetAdjustmentStyle(AdjustedCalculationDto measurement)
    {
        // Apply background colors to the cell based on Adjustment Needed
        return measurement.AdjustmentNeeded != null
            ? "background-color: #f2dede;" // Light red background
            : "background-color: #dff0d8;"; // Light green background
    }

}