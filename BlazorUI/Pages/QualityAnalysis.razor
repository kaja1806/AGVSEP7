<!-- QualityAnalysis.razor -->
@page "/QualityAnalysis"
@using global::Shared.Models
@inject HttpClient HttpClient

<div class="card">
    <h3>Automated Quality Analysis and Adjustments</h3>

    <!-- Loading spinner -->
    @if (IsLoading)
    {
        <div class="loading-spinner">
            <div class="spinner-border" role="status">
                <span class="sr-only"></span>
            </div>
        </div>
    }

    <h3>Measurement Data</h3>
    <button class="btn btn-primary" @onclick="RefreshData">Refresh</button>

    <table class="adjustment-table" style="@GetTableStyle()">
        <thead>
        <tr>
            <th>Date</th>
            <th>Measured Value</th>
            <th>Tolerance</th>
            <th>Deviation</th>
            <th>Adjustment Needed</th>
            <th>Segment No</th>
            <th>Stator No</th>
        </tr>
        </thead>
        <tbody>
        @if (_calculationResults != null)
        {
            @foreach (var measurement in _calculationResults)
            {
                <tr>
                    <td>@measurement.Date</td>
                    <td>@measurement.MeasuredValue.ToString("F2")</td>
                    <td>@measurement.Tolerance.ToString("F2")</td>
                    <td>@measurement.Deviation.ToString()</td>
                    <td style="@GetAdjustmentStyle(measurement.AdjustmentNeeded)">
                        @if (measurement.AdjustmentNeeded != null)
                        {
                            @((bool)measurement.AdjustmentNeeded ? "Yes" : "No")
                        }
                        else
                        {
                            <text>Run Calculation</text>
                        }
                    </td>
                    <td>@measurement.SegmentNo.ToString("F1")</td>
                    <td>@measurement.StatorNo</td>
                </tr>
            }
        }
        </tbody>
    </table>
</div>

@code {
    private List<AdjustedCalculationDto>? _calculationResults;
    private int statorNo;
    private bool IsLoading { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCalculationResult();
        if (_calculationResults.Any(x=>x.Deviation == null))
        {
            await RunCalculation(_calculationResults.First().StatorNo);
            await OnInitializedAsync();
        }
    }

    private async Task RefreshData()
    {
        await GetCalculationResult();
        StateHasChanged(); // Trigger UI update
    }

    private async Task GetCalculationResult()
    {
        IsLoading = true; // Set loading state to true before making the API call
        _calculationResults = await HttpClient.GetFromJsonAsync<List<AdjustedCalculationDto>>($"api/controller/GetCalculationResult") ?? throw new InvalidOperationException();
        IsLoading = false; // Set loading state to false after the API call is complete
    }
    private async Task RunCalculation(int? statorId)
    {
        IsLoading = true; 
        var postAsJsonAsync = await HttpClient.PostAsJsonAsync($"api/controller/RunCalculationForSegment/{statorId}", statorId) ?? throw new InvalidOperationException();
        IsLoading = false; 
    }

    private string GetAdjustmentStyle(bool? columnColor)
    {
        if (columnColor == null)
        {
            return "background-color: #f2dede;";
        }
        else
        {
            return columnColor == true
                ? "background-color: #f2dede;" // Light red background
                : "background-color: #dff0d8;"; // Light green background
        }
    }

    private string GetTableStyle()
    {
        // Adjust the style to grey out the table when loading
        return IsLoading ? "opacity: 0.5;" : "";
    }

}